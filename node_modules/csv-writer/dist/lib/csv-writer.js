"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_ENCODING = 'utf8';
const DEFAULT_INITIAL_APPEND_FLAG = false;
class CsvWriter {
    constructor(csvStringifier, path, fs, encoding, append) {
        this.fs = fs;
        this.path = path;
        this.csvStringifier = csvStringifier;
        this.encoding = encoding || DEFAULT_ENCODING;
        this.append = append || DEFAULT_INITIAL_APPEND_FLAG;
    }
    writeRecords(records) {
        return __awaiter(this, void 0, void 0, function* () {
            const headerString = !this.append && this.csvStringifier.getHeaderString();
            const recordsString = this.csvStringifier.stringifyRecords(records);
            const writeString = (headerString || '') + recordsString;
            const option = this.getWriteOption();
            yield this.write(writeString, option);
            this.append = true;
        });
    }
    write(string, options) {
        return new Promise((resolve, reject) => {
            this.fs.writeFile(this.path, string, options, (err) => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    getWriteOption() {
        return {
            encoding: this.encoding,
            flag: this.append ? 'a' : 'w'
        };
    }
}
exports.CsvWriter = CsvWriter;
//# sourceMappingURL=csv-writer.js.map